import fileinput


class Soldier:
    def __init__(self, name, score):
        self.name = name
        self.score = score
        self.pos = None

class MinHeap:
    def __init__(self):
        self.heapList = [0]
        self.currentSize = 0


    def percUp(self,i):
        
        while i // 2 > 0:
            
            if self.heapList[i].score < self.heapList[i // 2].score:
                
            
                tmp = self.heapList[i // 2]
                self.heapList[i // 2] = self.heapList[i]
                self.heapList[i] = tmp
                self.heapList[i].pos, self.heapList[i // 2].pos = self.heapList[i // 2].pos, self.heapList[i].pos
                
            i = i // 2

    def insert(self,k):
        
        self.heapList.append(k)
        self.currentSize = self.currentSize + 1
        # ---------
        k.pos=self.currentSize
        self.percUp(self.currentSize)

    def percDown(self,i):
        
        while (i * 2) <= self.currentSize:
            
            mc = self.minChild(i)
            if self.heapList[i].score > self.heapList[mc].score:
                
                tmp = self.heapList[i]
                self.heapList[i] = self.heapList[mc]
                self.heapList[mc] = tmp
                
                self.heapList[i].pos, self.heapList[mc].pos = self.heapList[mc].pos, self.heapList[i].pos
                
            i = mc

    def minChild(self,i):
        
        if i * 2 + 1 > self.currentSize:
            
            return i * 2
        else:
            
            if self.heapList[i*2].score < self.heapList[i*2+1].score:
                return i * 2
            else:
                return i * 2 + 1

    def delMin(self):
        retval = self.heapList[1]
        self.heapList[1].pos, self.heapList[self.currentSize].pos = self.heapList[self.currentSize].pos, self.heapList[1].pos
        self.heapList[1] = self.heapList[self.currentSize] #replaces first element with last element
        self.currentSize = self.currentSize - 1
        self.heapList.pop()
        self.percDown(1)
        return retval
    
    
inputlist = [] # original input list
candidatelist = []
cdict={}
for line in fileinput.input():
    inputlist.append(line.strip())

candidates = (int)(inputlist[0]) #number of candidates

candidatelist = inputlist[1:candidates+1] #list of original candidates to add to heap and dict

minHeap = MinHeap()

for candidate in candidatelist:
    temp = Soldier(candidate.split()[0],(int)(candidate.split()[1]))
    cdict[candidate.split()[0]]= temp
    minHeap.insert(temp)

#print(cdict)
    
#print(minHeap.delMin()) #works
    
#actionlist = inputlist[candidates+1:]
actionlist = inputlist[candidates+2:]
#print(cdict)
#print(actionlist) #still prints the amount of arguments in the list in the start of the list

#print(cdict)
#print(minHeap.heapList)

for action in actionlist:
    if(action[0]=='1'):
        name = action.split()[1]
        bonus = action.split()[2]
        cdict[name].score+=(int)(bonus)
        minHeap.percDown(cdict[name].pos)
    else:
        minScore = (int)(action.split()[1])
        while (int)(minHeap.heapList[1].score)<minScore:
            minHeap.delMin()
        print(len(minHeap.heapList)-1)

        
# for each in range(1,len(minHeap.heapList)):
#     print(minHeap.heapList[each].name)
#     print(minHeap.heapList[each].pos)
#print(minHeap.delMin())

#print(cdict)
#print(minHeap.heapList)
